题目描述：
给定一个只包含 '(' 和 ')' 的字符串，找出最长的包含有效括号的子串的长度。
###############################################################
例如：
（1）
输入: "(()"
输出: 2
解释: 最长有效括号子串为 "()"
（2）
输入: ")()())"
输出: 4
解释: 最长有效括号子串为 "()()"
（3）
输入: "()(())"
输出: 6
解释: 最长有效括号子串为 "()(())"
###############################################################
解题思路：使用dp。有效括号字符串分为三种：'()()'和'(())'和'()(())'。for循环遍历，')'可能存在有效括号的标记，发现')'时，
往前推看是否之前已经有有效括号字符串，获取之前最长有效括号字符串的起始索引，刷新遍历位置时的最长有效括号字符串长度，此时如果时前面两种情况就能得到答案，
但如果时第三种情况，如果将起始索引之前的最长有效括号字符串长度加上。
python代码:
class Solution:
    def longestValidParentheses(self, s: str) ->有效 int:
        if not s:
            return 0
        dp = [0] * len(s)
        for i in range(1, len(s)):
            if s[i] == ')':  # 可能是有效括号的标志
                j = i - 1 -dp[i - 1]
                if j >= 0 and s[j] == '(':
                    dp[i] += dp[i - 1] + 2
                    if j - 1 >= 0:
                        dp[i] += dp[j - 1]
        return max(dp)
