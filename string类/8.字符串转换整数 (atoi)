题目描述：
实现将字符串转换为整数的Atoi。
函数首先根据需要丢弃尽可能多的空白字符，直到找到第一个非空白字符。
然后，从这个字符开始，取一个可选的初始正负号，后跟尽可能多的数字，并将它们解释为一个数值。
字符串可以在构成整数的字符之后包含其他字符，这些字符将被忽略，并且不会影响此函数的行为。
如果str中的第一个非空白字符序列不是有效的整数，或者由于str为空或仅包含空白字符而不存在此类序列，则不执行转换。
如果无法执行有效的转换，则返回零值。
###############################################################
例如：
（1）
Input: "   -42"
Output: -42
Explanation: The first non-whitespace character is '-', which is the minus sign.
             Then take as many numerical digits as possible, which gets 42.
（2）
Input: "4193 with words"
Output: 4193
Explanation: Conversion stops at digit '3' as the next character is not a numerical digit.
（3）
Input: "words and 987"
Output: 0
Explanation: The first non-whitespace character is 'w', which is not a numerical 
             digit or a +/- sign. Therefore no valid conversion could be performed.
（4）
Input: "-91283472332"
Output: -2147483648
Explanation: The number "-91283472332" is out of the range of a 32-bit signed integer.
             Thefore INT_MIN (−231) is returned.
###############################################################
解题思路：需要使用.isdigit()，判断是否是数字字符；ord(),返回对应的 ASCII 数值。最大整型数为0x7fffffff，最小整型数为0x80000000
         特别注意：字符串如果为空，返回0。
python代码:
class Solution:
    def myAtoi(self, str: str) -> int:
        i = 0
        sign = 1
        while i < len(str) and str[i] == ' ':
            i += 1
        if i < len(str) and str[i] in {'-', '+'}:
            sign = -1 if str[i] == '-' else 1
            i += 1
        ans = 0
        for j in range(i, len(str)):
            if str[j].isdigit():
                ans = ans * 10 + ord(str[j]) - 48
                if sign == 1 and ans > 0x7fffffff:
                    return 0x7fffffff
                if sign == -1 and -ans < -0x80000000:
                    return -0x80000000
            else:
                break
        return sign * ans
