题目描述：
给定一个字符串 s 和一些长度相同的单词 words。找出 s 中恰好可以由 words 中所有单词串联形成的子串的起始位置。
注意子串要与 words 中的单词完全匹配，中间不能有其他字符，但不需要考虑 words 中单词串联的顺序。
###############################################################
例如：
（1）
输入：
  s = "barfoothefoobarman",
  words = ["foo","bar"]
输出：[0,9] 
（2）
输入：
  s = "wordgoodgoodgoodbestword",
  words = ["word","good","best","word"]
输出：[]
###############################################################
解题思路：使用字典将words中元素进行个数映射，然后利用for循环遍历，每次遍历都使用while循环观测该字符位置之后的一系列连续字符中能否组成
wordlist字典中的个数形式。如果可以append该字符索引，否则break，继续for循环。
python代码:
class Solution:
    def findSubstring(self, s: str, words: List[str]) -> List[int]:
        if len(words) == 0:
            return []
        wordlist = {}
        for i in words:
            if i not in wordlist:
                wordlist[i] = 1
            else:
                wordlist[i] += 1
        wlen = len(words[0])
        result = []
        for i in range(len(s) - wlen * len(words) + 1):
            cur = {}
            k = 0
            while k < len(words):
                word = s[i + k*wlen:i + k*wlen + wlen]
                if word not in wordlist:
                    break
                if word not in cur:
                    cur[word] = 1
                else:
                    cur[word] += 1
                if cur[word] > wordlist[word]:
                    break
                k += 1
            if k == len(words):
                result.append(i)
        return result
