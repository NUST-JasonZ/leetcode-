题目描述：
给定输入字符串和模式（P），实现与“.”和“*”支持匹配的正则表达式。
“.”匹配任何单个字符。
“*”与前面的元素零个或多个匹配。
匹配应该覆盖整个输入字符串（而不是部分）。
###############################################################
例如：
（1）
Input:
s = "aa"
p = "a"
Output: false
Explanation: "a" does not match the entire string "aa". 
（2）
Input:
s = "aa"
p = "a*"
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".
（3）
Input:
s = "ab"
p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".
（4）
Input:
s = "aab"
p = "c*a*b"
Output: true
Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches "aab".
（5）
Input:
s = "mississippi"
p = "mis*is*p*."
Output: false
###############################################################
解题思路：'.'会匹配任意字符；'*'会匹配前一个字符的0个或多个。重点放在'*'的情况判别上。如果不存在'*'时，那么就正常比较，一个字符对应一个。
         如果存在'*'，情况就比较复杂，分三种情况：'*'匹配0个字符、'*'匹配字符'.'（1个或多个字符）、'*'匹配不为'.'的字符（1个或多个字符）。
         其中第二种和第三种情况需要使用while循环,内部使用递归判断是否满足True条件。
         True条件：len(p) == 0 and len(s) == 0
python代码:
class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        # '.'会匹配任意字符；'*'会匹配前一个字符的0个或多个
        if len(p) == 0:
            return len(s) == 0  # 返回True的条件
        if len(p) == 1 or p[1] != '*':
            if len(s) == 0 or (s[0] != p[0] and p[0] != '.'):
                return False
            return self.isMatch(s[1:],p[1:])
        else:
            i = -1
            lenght = len(s)
            while i < lenght and (i < 0 or p[0] == '.' or p[0] == s[i]):
                if self.isMatch(s[i+1:], p[2:]):
                    return True
                i += 1
            return False
